name: Run JMeter Tests and Publish Report

on:
  schedule:
    - cron: '0 2 * * *'  # Every day at 2:00 AM UTC (10:00 PM ET)
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  jmeter-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install tools and JMeter
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils curl
        wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
        tar -xzf apache-jmeter-5.6.3.tgz
        echo "$PWD/apache-jmeter-5.6.3/bin" >> $GITHUB_PATH

    - name: Run JMeter test and generate HTML report
      run: |
        mkdir -p results/report
        jmeter -Jxstream.disable=true -n -t tests/APIs_Script.jmx -l results/result.jtl -e -o results/report

    - name: Extract test config from .jmx
      id: jmeter_config
      run: |
        THREADS=$(xmllint --xpath "string(//ThreadGroup/intProp[@name='ThreadGroup.num_threads'])" tests/APIs_Script.jmx 2>/dev/null || echo "Not found")
        RAMPUP=$(xmllint --xpath "string(//ThreadGroup/intProp[@name='ThreadGroup.ramp_time'])" tests/APIs_Script.jmx 2>/dev/null || echo "Not found")
        DURATION=$(xmllint --xpath "string(//ThreadGroup/stringProp[@name='ThreadGroup.duration'])" tests/APIs_Script.jmx 2>/dev/null || echo "Not specified")
        echo "threads=$THREADS" >> $GITHUB_OUTPUT
        echo "rampup=$RAMPUP" >> $GITHUB_OUTPUT
        echo "duration=$DURATION" >> $GITHUB_OUTPUT

    - name: Map labels to API paths
      id: label_map
      run: |
        declare -A label_to_path
        while read -r line; do
          label=$(echo "$line" | xmllint --xpath 'string(//@testname)' - 2>/dev/null)
          path=$(echo "$line" | xmllint --xpath 'string(//stringProp[@name="HTTPSampler.path"])' - 2>/dev/null)
          if [[ -n "$label" && -n "$path" ]]; then
            echo "$label=$path" >> label_map.txt
          fi
        done < <(grep -oP '<HTTPSamplerProxy[^>]*>.*?</HTTPSamplerProxy>' tests/APIs_Script.jmx | tr -d '\n')

    - name: Analyze results and notify Slack
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ -z "$SLACK_WEBHOOK" ]; then
          echo "‚ùå SLACK_WEBHOOK is not set. Please add it in your GitHub repository secrets."
          exit 1
        fi

        declare -A label_path
        while IFS='=' read -r label path; do
          label_path["$label"]="$path"
        done < label_map.txt

        ERRORS=""
        while IFS=',' read -r _ time label code _; do
          if [[ $code -ge 400 ]]; then
            api_path="${label_path[$label]}"
            api_path=${api_path:-$label}
            ERRORS+="$api_path ‚Üí $code\n"
          fi
        done < <(tail -n +2 results/result.jtl | awk -F',' '{print $1","$2","$3","$4","$5}')

        if [ -n "$ERRORS" ]; then
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \":warning: *JMeter Alert*\\n\\n*The following APIs had issues:*\\n\"\"\"\n$ERRORS\"\"\"\\n*Test Configuration:*\\n‚Ä¢ Users: ${{ steps.jmeter_config.outputs.threads }}\\n‚Ä¢ Ramp-up: ${{ steps.jmeter_config.outputs.rampup }}s\\n‚Ä¢ Duration: ${{ steps.jmeter_config.outputs.duration }}\\n\\n:mag: View report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          }" $SLACK_WEBHOOK
        fi

    - name: Deploy HTML report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./results/report
        publish_branch: gh-pages
        force_orphan: true
        keep_files: false
        commit_message: "Deploy JMeter HTML report üöÄ"
